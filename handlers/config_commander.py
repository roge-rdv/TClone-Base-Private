from telethon import events
from utils.logger import logger
from utils.scheduler import reload_scheduler
from utils.resource_handler import get_config_path, load_config, save_config
import json
import os
import re
from datetime import datetime

# Usa o caminho de configura√ß√£o do resource handler
CONFIG_PATH = get_config_path()

# Lista de comandos administrativos que sempre funcionam
ADMIN_COMMANDS = ['/help', '/status', '/config', '/block', '/unblock', '/blocklist', 
                 '/replace', '/unreplace', '/replacelist', '/schedule', '/settime', 
                 '/showschedule', '/deletestatus', '/clearmappings', '/textoonly']

async def handle_config_commands(event):
    """
    Handler para comandos relacionados √† configura√ß√£o do bot.
    
    Comandos:
    /block [palavra] - Adiciona uma palavra √† lista de bloqueadas
    /unblock [palavra] - Remove uma palavra da lista de bloqueadas
    /blocklist - Mostra a lista de palavras bloqueadas
    
    /replace [original]=[substituto] - Adiciona uma substitui√ß√£o de texto
    /unreplace [original] - Remove uma substitui√ß√£o de texto
    /replacelist - Mostra a lista de substitui√ß√µes de texto
    
    /schedule on/off - Ativa/desativa o agendamento
    /settime start [HH:MM] - Define hor√°rio de in√≠cio
    /settime end [HH:MM] - Define hor√°rio de t√©rmino
    /showschedule - Mostra as configura√ß√µes de agendamento
    
    /textoonly on/off - Ativa/desativa replica√ß√£o apenas de texto
    
    /config - Mostra todas as configura√ß√µes
    """
    try:
        if not event.raw_text:
            return
            
        command_full = event.raw_text.strip()
        command_parts = command_full.split()
        command_name = command_parts[0].lower()
        
        # ----- COMANDOS PARA PALAVRAS BLOQUEADAS -----
        
        # Adicionar palavra bloqueada
        if command_name == "/block" and len(command_parts) > 1:
            # Extrai a palavra a ser bloqueada (pode conter espa√ßos)
            word = " ".join(command_parts[1:]).lower()
            
            # Carrega a configura√ß√£o atual usando o resource handler
            config = load_config()
            
            # Garante que a lista existe
            if 'blocked_words' not in config:
                config['blocked_words'] = []
                
            # Verifica se a palavra j√° est√° na lista
            if word in config['blocked_words']:
                await event.respond(f"‚ö†Ô∏è A palavra '{word}' j√° est√° na lista de bloqueadas.")
                return
                
            # Adiciona a palavra √† lista
            config['blocked_words'].append(word)
            
            # Salva a configura√ß√£o usando o resource handler
            save_config(config)
                
            await event.respond(f"‚úÖ Palavra '{word}' adicionada √† lista de bloqueadas.")
            return
            
        # Remover palavra bloqueada
        elif command_name == "/unblock" and len(command_parts) > 1:
            # Extrai a palavra a ser desbloqueada
            word = " ".join(command_parts[1:]).lower()
            
            # Carrega a configura√ß√£o atual usando o resource handler
            config = load_config()
                
            # Verifica se a lista existe
            if 'blocked_words' not in config or word not in config['blocked_words']:
                await event.respond(f"‚ö†Ô∏è A palavra '{word}' n√£o est√° na lista de bloqueadas.")
                return
                
            # Remove a palavra da lista
            config['blocked_words'].remove(word)
            
            # Salva a configura√ß√£o usando o resource handler
            save_config(config)
                
            await event.respond(f"‚úÖ Palavra '{word}' removida da lista de bloqueadas.")
            return
            
        # Listar palavras bloqueadas
        elif command_name == "/blocklist":
            # Carrega a configura√ß√£o atual usando o resource handler
            config = load_config()
                
            # Verifica se h√° palavras bloqueadas
            blocked_words = config.get('blocked_words', [])
            
            if not blocked_words:
                await event.respond("üìã N√£o h√° palavras bloqueadas.")
                return
                
            # Formata a lista de palavras bloqueadas
            blocked_list = "üìã **Palavras bloqueadas:**\n\n"
            for i, word in enumerate(blocked_words, 1):
                blocked_list += f"{i}. `{word}`\n"
                
            await event.respond(blocked_list)
            return
            
        # ----- COMANDOS PARA SUBSTITUI√á√ïES DE TEXTO -----
        
        # Adicionar substitui√ß√£o de texto
        elif command_name == "/replace" and len(command_parts) > 1:
            # Extrai o texto completo ap√≥s o comando
            replace_text = " ".join(command_parts[1:])
            
            # Verifica se o formato √© correto (original=substituto)
            if "=" not in replace_text:
                await event.respond("‚ö†Ô∏è Formato incorreto. Use: `/replace palavra=substituto` (sem espa√ßos antes/depois do sinal =)")
                return
                
            # Divide em original e substituto
            original, substitute = replace_text.split("=", 1)
            original = original.strip()
            substitute = substitute.strip()
            
            # Verifica se os campos est√£o vazios
            if not original or not substitute:
                await event.respond("‚ö†Ô∏è Texto original e substituto n√£o podem estar vazios")
                return
            
            # Garante que estamos usando UTF-8 para caracteres especiais
            if isinstance(original, bytes):
                original = original.decode('utf-8', errors='replace')
            if isinstance(substitute, bytes):
                substitute = substitute.decode('utf-8', errors='replace')
            
            # Carrega a configura√ß√£o atual usando o resource handler
            config = load_config()
                
            # Garante que o dicion√°rio existe
            if 'replacements' not in config:
                config['replacements'] = {}
                
            # Adiciona a substitui√ß√£o
            config['replacements'][original] = substitute
            
            # Salva a configura√ß√£o usando o resource handler
            save_config(config)
                
            # Responder com emoji e cores para facilitar visualiza√ß√£o
            await event.respond(f"‚úÖ Substitui√ß√£o adicionada com sucesso!\n\nüìù Texto original: `{original}`\nüìù Substitu√≠do por: `{substitute}`\n\nExemplo: `{original}` ‚Üí `{substitute}`")
            return
            
        # Remover substitui√ß√£o de texto
        elif command_name == "/unreplace" and len(command_parts) > 1:
            # Extrai o texto original
            original = " ".join(command_parts[1:])
            
            # Carrega a configura√ß√£o atual usando o resource handler
            config = load_config()
                
            # Verifica se existe o dicion√°rio e a chave
            if 'replacements' not in config or original not in config['replacements']:
                await event.respond(f"‚ö†Ô∏è N√£o h√° substitui√ß√£o configurada para '{original}'.")
                return
                
            # Remove a substitui√ß√£o
            substitute = config['replacements'][original]
            del config['replacements'][original]
            
            # Salva a configura√ß√£o usando o resource handler
            save_config(config)
                
            await event.respond(f"‚úÖ Substitui√ß√£o removida: '{original}' ‚Üí '{substitute}'")
            return
            
        # Listar substitui√ß√µes de texto
        elif command_name == "/replacelist":
            # Carrega a configura√ß√£o atual usando o resource handler
            config = load_config()
                
            # Verifica se h√° substitui√ß√µes
            replacements = config.get('replacements', {})
            
            if not replacements:
                await event.respond("üìã N√£o h√° substitui√ß√µes de texto configuradas.")
                return
                
            # Formata a lista de substitui√ß√µes
            replace_list = "üìã **Substitui√ß√µes de texto configuradas:**\n\n"
            for i, (original, substitute) in enumerate(replacements.items(), 1):
                replace_list += f"{i}. `{original}` ‚Üí `{substitute}`\n"
                
            await event.respond(replace_list)
            return
            
        # ----- COMANDOS PARA AGENDAMENTO -----
        
        # Ativar/desativar agendamento
        elif command_name == "/schedule" and len(command_parts) > 1:
            # Verifica o par√¢metro (on/off)
            param = command_parts[1].lower()
            
            if param not in ["on", "off"]:
                await event.respond("‚ö†Ô∏è Par√¢metro inv√°lido. Use 'on' ou 'off'.")
                return
                
            # Converte para booleano
            enable = param == "on"
            
            # Carrega a configura√ß√£o atual usando o resource handler
            config = load_config()
                
            # Garante que o dicion√°rio existe
            if 'schedule' not in config:
                config['schedule'] = {}
                
            # Atualiza a configura√ß√£o
            config['schedule']['enable'] = enable
            
            # Salva a configura√ß√£o usando o resource handler
            save_config(config)
            
            # Recarrega o agendador
            await reload_scheduler(event.client)
                
            await event.respond(f"‚úÖ Agendamento {'ativado' if enable else 'desativado'}.")
            return
            
        # Definir hor√°rios
        elif command_name == "/settime" and len(command_parts) > 2:
            # Verifica o tipo (start/end)
            time_type = command_parts[1].lower()
            
            if time_type not in ["start", "end"]:
                await event.respond("‚ö†Ô∏è Tipo inv√°lido. Use 'start' ou 'end'.")
                return
                
            # Verifica o formato da hora (HH:MM)
            time_str = command_parts[2]
            if not re.match(r"^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$", time_str):
                await event.respond("‚ö†Ô∏è Formato de hora inv√°lido. Use o formato HH:MM (ex: 08:30).")
                return
                
            # Carrega a configura√ß√£o atual usando o resource handler
            config = load_config()
                
            # Garante que o dicion√°rio existe
            if 'schedule' not in config:
                config['schedule'] = {}
                
            # Atualiza a configura√ß√£o
            config['schedule'][f'{time_type}_time'] = time_str
            
            # Salva a configura√ß√£o usando o resource handler
            save_config(config)
            
            # Recarrega o agendador para aplicar as altera√ß√µes
            await reload_scheduler(event.client)
                
            await event.respond(f"‚úÖ Hor√°rio de {'in√≠cio' if time_type == 'start' else 't√©rmino'} definido para {time_str}.")
            return
            
        # Mostrar configura√ß√£o de agendamento
        elif command_name == "/showschedule":
            # Carrega a configura√ß√£o atual usando o resource handler
            config = load_config()
                
            # Verifica se h√° configura√ß√£o de agendamento
            schedule = config.get('schedule', {})
            
            # Formata a mensagem
            enable = schedule.get('enable', False)
            start_time = schedule.get('start_time', 'N√£o definido')
            end_time = schedule.get('end_time', 'N√£o definido')
            
            # Verifica se o bot est√° no per√≠odo ativo
            now = datetime.now().time()
            is_active_period = False
            
            if start_time != 'N√£o definido' and end_time != 'N√£o definido':
                start_parts = start_time.split(':')
                end_parts = end_time.split(':')
                
                start_hour, start_minute = int(start_parts[0]), int(start_parts[1])
                end_hour, end_minute = int(end_parts[0]), int(end_parts[1])
                
                current_hour, current_minute = now.hour, now.minute
                
                if start_hour < end_hour:
                    # Per√≠odo normal
                    is_active_period = (current_hour > start_hour or (current_hour == start_hour and current_minute >= start_minute)) and \
                                       (current_hour < end_hour or (current_hour == end_hour and current_minute < end_minute))
                else:
                    # Per√≠odo que cruza a meia-noite
                    is_active_period = (current_hour > start_hour or (current_hour == start_hour and current_minute >= start_minute)) or \
                                       (current_hour < end_hour or (current_hour == end_hour and current_minute < end_minute))
            
            schedule_msg = f"""
‚è∞ **Configura√ß√£o de Agendamento:**

‚Ä¢ Status: {'‚úÖ Ativado' if enable else '‚ùå Desativado'}
‚Ä¢ Hor√°rio de in√≠cio: {start_time}
‚Ä¢ Hor√°rio de t√©rmino: {end_time}

‚û°Ô∏è O bot {'processar√°' if enable else 'n√£o processar√°'} mensagens entre {start_time} e {end_time}.
üîÑ Estado atual: {'üü¢ Ativo' if (enable and is_active_period) else 'üî¥ Inativo'}
            """
            
            await event.respond(schedule_msg)
            return
            
        # ----- COMANDO PARA REPLICAR APENAS TEXTO -----
        
        # Ativar/desativar replica√ß√£o apenas de texto
        elif command_name == "/textoonly" and len(command_parts) > 1:
            # Verifica o par√¢metro (on/off)
            param = command_parts[1].lower()
            
            if param not in ["on", "off"]:
                await event.respond("‚ö†Ô∏è Par√¢metro inv√°lido. Use 'on' ou 'off'.")
                return
                
            # Converte para booleano
            enable = param == "on"
            
            # Carrega a configura√ß√£o atual usando o resource handler
            config = load_config()
                
            # Atualiza a configura√ß√£o
            config['replicar_apenas_texto'] = enable
            
            # Salva a configura√ß√£o usando o resource handler
            save_config(config)
                
            await event.respond(f"‚úÖ Modo 'replicar apenas texto' {'ativado' if enable else 'desativado'}.\n\n" + 
                              f"{'üî§ O bot agora replicar√° APENAS mensagens de texto.' if enable else 'üî§üì∑ O bot agora replicar√° mensagens de texto E m√≠dia.'}")
            return
            
        # ----- COMANDOS GERAIS -----
        
        # Mostrar todas as configura√ß√µes
        elif command_name == "/config":
            # Carrega a configura√ß√£o atual usando o resource handler
            config = load_config()
                
            # Formata a mensagem
            blocked_count = len(config.get('blocked_words', []))
            replace_count = len(config.get('replacements', {}))
            source_count = len(config.get('source_chats', []))
            dest_count = len(config.get('destination_chats', []))
            sticker_count = len(config.get('sticker_replacements', {}))
            image_count = len(config.get('image_replacements', {}))
            schedule = config.get('schedule', {})
            
            config_msg = f"""
‚öôÔ∏è **Configura√ß√£o do Bot:**

‚Ä¢ Chats de origem: {source_count}
‚Ä¢ Chats de destino: {dest_count}
‚Ä¢ Palavras bloqueadas: {blocked_count}
‚Ä¢ Substitui√ß√µes de texto: {replace_count}
‚Ä¢ Substitui√ß√µes de stickers: {sticker_count}
‚Ä¢ Substitui√ß√µes de imagens: {image_count}

üìÖ **Agendamento:**
‚Ä¢ Status: {'‚úÖ Ativado' if schedule.get('enable', False) else '‚ùå Desativado'}
‚Ä¢ Hor√°rio: {schedule.get('start_time', 'N/A')} - {schedule.get('end_time', 'N/A')}

üîß **Outros:**
‚Ä¢ Apenas texto: {'‚úÖ Sim' if config.get('replicar_apenas_texto', False) else '‚ùå N√£o'}
‚Ä¢ N√≠vel de log: {config.get('log_level', 'INFO')}

üìù Use /help para ver todos os comandos dispon√≠veis.
            """
            
            await event.respond(config_msg)
            return

        # ----- COMANDOS PARA GERENCIAMENTO DE MENSAGENS -----
        
        # Comando para verificar o status da sincroniza√ß√£o de dele√ß√µes
        elif command_name == "/deletestatus":
            try:
                # Obt√©m estat√≠sticas do banco de dados
                from database.db_manager import DatabaseManager
                db = DatabaseManager()
                
                # Obt√©m contagem de mapeamentos
                cursor = db.conn.execute("SELECT COUNT(*) FROM messages")
                total_mappings = cursor.fetchone()[0]
                
                # Obt√©m contagem dos √∫ltimos dias
                cursor = db.conn.execute("SELECT COUNT(*) FROM messages WHERE timestamp > datetime('now', '-1 day')")
                recent_mappings = cursor.fetchone()[0]
                
                status_message = f"""
üìä **Status de Sincroniza√ß√£o de Dele√ß√µes:**

‚Ä¢ Total de mapeamentos: {total_mappings}
‚Ä¢ Mapeamentos recentes (24h): {recent_mappings}

‚ÑπÔ∏è **Como funciona:**
O sistema de dele√ß√£o sincronizada depende do mapeamento entre mensagens originais e replicadas.
Quando uma mensagem √© apagada no grupo de origem, o bot procura seu ID correspondente no banco 
de dados e tenta apag√°-la no grupo de destino.

‚ö†Ô∏è **Se as dele√ß√µes n√£o estiverem funcionando:**
1. Certifique-se de que o bot tem permiss√µes de admin para apagar mensagens
2. Verifique se h√° mapeamentos recentes no banco de dados
3. Use /clearmappings para limpar mapeamentos antigos se necess√°rio

üìù As mensagens mais antigas que 30 dias s√£o automaticamente removidas do banco.
                """
                
                await event.respond(status_message)
                
            except Exception as e:
                logger.error(f"Erro ao verificar status das dele√ß√µes: {e}")
                await event.respond(f"‚ùå Erro ao verificar status: {e}")
            
            return
        
        # Comando para limpar mapeamentos
        elif command_name == "/clearmappings" and len(command_parts) > 1:
            try:
                days = int(command_parts[1])
                if days <= 0:
                    await event.respond("‚ö†Ô∏è O n√∫mero de dias deve ser maior que zero.")
                    return
                
                # Limpa mapeamentos mais antigos que o n√∫mero especificado de dias
                from database.db_manager import DatabaseManager
                db = DatabaseManager()
                
                # Obt√©m contagem antes da limpeza
                cursor = db.conn.execute("SELECT COUNT(*) FROM messages")
                before_count = cursor.fetchone()[0]
                
                # Executa a limpeza
                db.conn.execute(f"DELETE FROM messages WHERE timestamp < datetime('now', '-{days} day')")
                db.conn.commit()
                
                # Obt√©m contagem ap√≥s a limpeza
                cursor = db.conn.execute("SELECT COUNT(*) FROM messages")
                after_count = cursor.fetchone()[0]
                
                # Otimiza o banco
                db.conn.execute("VACUUM")
                db.conn.commit()
                
                removed = before_count - after_count
                
                await event.respond(f"‚úÖ Limpeza conclu√≠da:\n‚Ä¢ Mapeamentos removidos: {removed}\n‚Ä¢ Mapeamentos restantes: {after_count}")
                
            except ValueError:
                await event.respond("‚ö†Ô∏è Formato inv√°lido. Use: /clearmappings [dias]")
            except Exception as e:
                logger.error(f"Erro ao limpar mapeamentos: {e}")
                await event.respond(f"‚ùå Erro ao limpar mapeamentos: {e}")
            
            return
            
    except Exception as e:
        logger.error(f"Erro ao processar comando de configura√ß√£o: {e}", exc_info=True)
        await event.respond(f"‚ùå Erro ao processar comando: {e}")
